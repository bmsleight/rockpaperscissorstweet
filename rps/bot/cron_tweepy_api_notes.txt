Cron job running ./manage.py addTokensToQueue

class Rate(models.Model):
    name = models.CharField(max_length=255, help_text='rate_name', unique=True)
    per_fifteen_minute = models.IntegerField(default=40, help='True Value')
    current_tokens = models.IntegerField(default=0, help='Max is half of api_rate_per_fifteen_minute')
    last_token_added = models.DateTimeField(auto_now_add=True)


# Avoid it being blocked - http://docs.celeryproject.org/en/latest/userguide/routing.html
def waitForToken(name):
    no_token = True
    print_every_10 = 10
    while(no_token):
        try:
            rate = Rate.objects.get(name__iexact=name)
            if rate.current_tokens > 0:
                rate.current_tokens = queue.current_tokens - 1
                rate.save()
                no_token = False
                print('Token taken for ', name)
        except:
            print('No Rate with name: ', name)
            quit(0)
        if no_token:
            time.sleep(1)
        if print_every_10 == 10 and no_token:
            print_every_10 = 0
            print('Rate ..: ', name)
        else:
            print_every_10 = print_every_10 + 1


def periodicUpdateRate():
    now = datetime.datetime.now()
    second_in_15_minute = 60 * 15
    try:
        rates = Rate.objects.all()
        for rate in rates:
            if rate.current_tokens < rate.per_fifteen_minute/2:
                extra_seconds = (second_in_5_minute / rate.per_five_minute) * 2
                if now > rate.last_token_added + datetime.timedelta(seconds = extra_seconds):
                    print('New token needed for: ', rate.name)
                    rate.current_tokens = rate.current_tokens + 1
                    rate.last_token_added = now
                    rate.save()
    except:
        print('No rates found')
